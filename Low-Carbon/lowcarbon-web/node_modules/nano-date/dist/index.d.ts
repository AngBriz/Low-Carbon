import BigNumber from 'bignumber.js';
declare class NanoDate {
    readonly full: BigNumber;
    static now(): number;
    static parse(input: any): number;
    static UTC(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, milliseconds?: number): number;
    private _full;
    private _date;
    private buildSetFunction;
    private getDaysBetween;
    private getValue;
    constructor(value?: number | string | Date | NanoDate);
    constructor(year: number, monthIndex: number, day?: number, hour?: number, minute?: number, second?: number, millisecond?: number);
    setUTCNanoseconds: (nanoseconds: number) => any;
    setNanoseconds: (nanoseconds: number) => any;
    setUTCMicroseconds: (microseconds: number, nanoseconds?: number) => any;
    setMicroseconds: (microseconds: number, nanoseconds?: number) => any;
    setUTCMilliseconds: (milliseconds: number, microseconds?: number, nanoseconds?: number) => any;
    setMilliseconds: (milliseconds: number, microseconds?: number, nanoseconds?: number) => any;
    setUTCSeconds: (seconds: number, milliseconds?: number, microseconds?: number, nanoseconds?: number) => any;
    setSeconds: (seconds: number, milliseconds?: number, microseconds?: number, nanoseconds?: number) => any;
    setUTCMinutes: (minutes: number, seconds?: number, milliseconds?: number, microseconds?: number, nanoseconds?: number) => any;
    setMinutes: (minutes: number, seconds?: number, milliseconds?: number, microseconds?: number, nanoseconds?: number) => any;
    setUTCHours: (hours: number, minutes?: number, seconds?: number, milliseconds?: number, microseconds?: number, nanoseconds?: number) => any;
    setHours: (hours: number, minutes?: number, seconds?: number, milliseconds?: number, microseconds?: number, nanoseconds?: number) => any;
    setUTCDate: (date: number) => any;
    setDate: (date: number) => any;
    setUTCMonth: (month: number, date?: number) => any;
    setMonth: (month: number, date?: number) => any;
    setUTCFullYear: (year: number, month?: number, date?: number) => any;
    setFullYear: (year: number, month?: number, date?: number) => any;
    /**
     * Gets the year, using local time
     * @memberof NanoDate
     */
    getFullYear: () => number;
    /**
     * Gets the month, using local time
     * @memberof NanoDate
     */
    getMonth: () => number;
    /**
     * Gets the day-of-the-month, using local time
     * @memberof NanoDate
     */
    getDate: () => number;
    /**
     * Gets the day of the week, using local time
     * @memberof NanoDate
     */
    getDay: () => number;
    /**
     * Gets the hours in a date, using local time
     * @memberof NanoDate
     */
    getHours: () => number;
    /**
     * Gets the minutes in a date, using local time
     * @memberof NanoDate
     */
    getMinutes: () => number;
    /**
     * Gets the seconds in a date, using local time
     * @memberof NanoDate
     */
    getSeconds: () => number;
    /**
     * Gets the milliseconds in a date, using local time
     * @memberof NanoDate
     */
    getMilliseconds: () => number;
    /**
     * Gets the year, using Universal Coordinated Time (UTC)
     * @memberof NanoDate
     */
    getUTCFullYear: () => number;
    /**
     * Gets the month, using Universal Coordinated Time (UTC)
     * @memberof NanoDate
     */
    getUTCMonth: () => number;
    /**
     * Gets the day-of-the-month, using Universal Coordinated Time (UTC)
     * @memberof NanoDate
     */
    getUTCDate: () => number;
    /**
     * Gets the day of the week, using Universal Coordinated Time (UTC)
     * @memberof NanoDate
     */
    getUTCDay: () => number;
    /**
     * Gets the hours in a date, using Universal Coordinated Time (UTC)
     * @memberof NanoDate
     */
    getUTCHours: () => number;
    /**
     * Gets the minutes in a date, using Universal Coordinated Time (UTC)
     * @memberof NanoDate
     */
    getUTCMinutes: () => number;
    /**
     * Gets the seconds in a date, using Universal Coordinated Time (UTC)
     * @memberof NanoDate
     */
    getUTCSeconds: () => number;
    /**
     * Gets the milliseconds in a date, using Universal Coordinated Time (UTC)
     * @memberof NanoDate
     */
    getUTCMilliseconds: () => number;
    /**
     * Returns a date as a string
     * @memberof NanoDate
     */
    toDateString: () => string;
    /**
     * Converts a date to a string by using the current or specified locale.
     * @param locales A locale string or array of locale strings that contain one or more language or locale tags.
     * If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale.
     * If you omit this parameter, the default locale of the JavaScript runtime is used.
     * @param options An object that contains one or more properties that specify comparison options.
     * @memberof NanoDate
     */
    toLocaleDateString: (locales?: string | string[], options?: Intl.DateTimeFormatOptions) => string;
    /**
     * Converts a date and time to a string by using the current or specified locale.
     * @param locales A locale string or array of locale strings that contain one or more language or locale tags.
     * If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale.
     * If you omit this parameter, the default locale of the JavaScript runtime is used.
     * @param options An object that contains one or more properties that specify comparison options.
     * @memberof NanoDate
     */
    toLocaleString: (locales?: string | string[], options?: Intl.DateTimeFormatOptions) => string;
    /**
     * Returns a time as a string
     * @memberof NanoDate
     */
    toTimeString: () => string;
    /**
     * Converts a time to a string by using the current or specified locale.
     * @param locales A locale string or array of locale strings that contain one or more language or locale tags.
     * If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale.
     * If you omit this parameter, the default locale of the JavaScript runtime is used.
     * @param options An object that contains one or more properties that specify comparison options.
     */
    toLocaleTimeString: (locales?: string | string[], options?: Intl.DateTimeFormatOptions) => string;
    /**
     * Returns a date as a string value in ISO format
     * @memberof NanoDate
     */
    toISOString: () => string;
    /**
     * Gets the difference in minutes between the time on the local computer and Universal Coordinated Time (UTC).
     * @memberof NanoDate
     */
    getTimezoneOffset: () => number;
    getTime: () => string;
    /**
     * Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC.
     * @memberof NanoDate
     */
    valueOf: () => number;
    /**
     * Returns the stored time value in milliseconds and microseconds since midnight, January 1, 1970 UTC.
     * @memberof NanoDate
     */
    valueOfWithMicro: () => number;
    /**
     * Returns the stored time value in milliseconds and nanoseconds since midnight, January 1, 1970 UTC.
     * @memberof NanoDate
     */
    valueOfWithNano: () => string;
    getMicroseconds: () => number;
    getUTCMicroseconds: () => number;
    getNanoseconds: () => number;
    getUTCNanoseconds: () => number;
    setTime: (time: any) => any;
    setUTCTime: (time: any) => any;
    toString: () => any;
    toUTCString: () => any;
    toISOStringFull: () => string;
    toGMTString: () => any;
    private setupFunctions;
    private _getFullYear;
    private _getDate;
    private _getMonth;
    private _getDays;
    private _toString;
}
export default NanoDate;
